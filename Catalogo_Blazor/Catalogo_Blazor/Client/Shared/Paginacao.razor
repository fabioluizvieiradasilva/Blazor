<nav aria-label="Paginacao">
    <ul class="pagination">
        @foreach (var link in links)
        {
            <li @onclick="@(()=>PaginaSelecionadaLink(link))"
                style="cursor:pointer;"
                class="page-item @(link.Enable ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {

    [Parameter]
    public int paginaAtual { get; set; } = 1;
    [Parameter]
    public int QuantidadeTotalPaginas { get; set; }
    [Parameter]
    public int Raio { get; set; } = 3;
    [Parameter]
    public EventCallback<int> PaginaSelecionada{ get; set; }

    List<LinkModel> links;

    private async Task PaginaSelecionadaLink(LinkModel link)
    {
        if (link.Page == paginaAtual)
            return;

        if (!link.Enable)
            return;

        paginaAtual = link.Page;
        await PaginaSelecionada.InvokeAsync(link.Page);
    }

    class LinkModel
    {
        public LinkModel(int page) : this(page,true)
        {}

        public LinkModel(int page, bool enable) : this(page, enable, page.ToString())
        {}

        public LinkModel(int page, bool enable, string text)
        {
            Page = page;
            Enable = enable;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enable { get; set; }
        public bool Active { get; set; }

    }

    protected override void OnParametersSet()
    {
        CarregaPaginas();
    }

    private void CarregaPaginas()
    {
        links = new List<LinkModel>();

        //tratando o link da página anterior
        var isLinkPaginaAnteriorHabilitado = paginaAtual != 1;
        var paginaAnterior = paginaAtual - 1;

        links.Add(new LinkModel(paginaAnterior, isLinkPaginaAnteriorHabilitado, "Anterior"));

        //tratando os links das páginas específicas
        for (int i = 1; i <= QuantidadeTotalPaginas; i++)
        {
            if (i >= paginaAtual - Raio && i <= paginaAtual + Raio)
            {
                links.Add(new LinkModel(i)
                    {
                        Active = paginaAtual == i
                    });
            } 
        }

        //tratando o link para a proxima pagina
        var isLinkProximaPaginaHabilitado = paginaAtual != QuantidadeTotalPaginas;
        var proximaPagina = paginaAtual + 1;

        links.Add(new LinkModel(proximaPagina, isLinkProximaPaginaHabilitado, "Próximo"));
    }

}
